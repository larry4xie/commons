<?xml version="1.0" encoding="UTF-8"?>
<taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
	version="2.1">

	<description>JSTL functions extension library</description>
	<display-name>JSTL functions extension</display-name>
	<tlib-version>1.1</tlib-version>
	<short-name>fnx</short-name>
	<uri>/commons-fnx</uri>
	
<!-- start: compatible jstl functions -->
  <function>
    <description>
      Tests if an input string contains the specified substring.
    </description>
    <name>contains</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>boolean contains(java.lang.String, java.lang.String)</function-signature>
    <example>
      &lt;c:if test="${fn:contains(name, searchString)}">
    </example>
  </function>

  <function>
    <description>
      Tests if an input string contains the specified substring in a case insensitive way.
    </description>
    <name>containsIgnoreCase</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>boolean containsIgnoreCase(java.lang.String, java.lang.String)</function-signature>
    <example>
      &lt;c:if test="${fn:containsIgnoreCase(name, searchString)}">
    </example>
  </function>

  <function>
    <description>
      Tests if an input string ends with the specified suffix.
    </description>
    <name>endsWith</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>boolean endsWith(java.lang.String, java.lang.String)</function-signature>
    <example>
      &lt;c:if test="${fn:endsWith(filename, ".txt")}">
    </example>
  </function>

  <function>
    <description>
      Escapes characters that could be interpreted as XML markup.
    </description>
    <name>escapeXml</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String escapeXml(java.lang.String)</function-signature>
    <example>
      ${fn:escapeXml(param:info)}
    </example>
  </function>

  <function>
    <description>
      Returns the index withing a string of the first occurrence of a specified substring.
    </description>
    <name>indexOf</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>int indexOf(java.lang.String, java.lang.String)</function-signature>
    <example>
      ${fn:indexOf(name, "-")}
    </example>
  </function>

  <function>
    <description>
      Joins all elements of an array into a string.
    </description>
    <name>join</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String join(java.lang.String[], java.lang.String)</function-signature>
    <example>
      ${fn:join(array, ";")}
    </example>
  </function>

  <function>
    <description>
      Returns the number of items in a collection, or the number of characters in a string.
    </description>
    <name>length</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>int length(java.lang.Object)</function-signature>
    <example>
      You have ${fn:length(shoppingCart.products)} in your shopping cart.
    </example>
  </function>

  <function>
    <description>
      Returns a string resulting from replacing in an input string all occurrences
      of a "before" string into an "after" substring.
    </description>
    <name>replace</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)</function-signature>
    <example>
      ${fn:replace(text, "-", "&#149;")}
    </example>
  </function>

  <function>
    <description>
      Splits a string into an array of substrings.
    </description>
    <name>split</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String[] split(java.lang.String, java.lang.String)</function-signature>
    <example>
      ${fn:split(customerNames, ";")}
    </example>
  </function>

  <function>
    <description>
      Tests if an input string starts with the specified prefix.
    </description>
    <name>startsWith</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>boolean startsWith(java.lang.String, java.lang.String)</function-signature>
    <example>
      &lt;c:if test="${fn:startsWith(product.id, "100-")}">
    </example>
  </function>

  <function>
    <description>
      Returns a subset of a string.
    </description>
    <name>substring</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String substring(java.lang.String, int, int)</function-signature>
    <example>
      P.O. Box: ${fn:substring(zip, 6, -1)}
    </example>
  </function>

  <function>
    <description>
      Returns a subset of a string following a specific substring.
    </description>
    <name>substringAfter</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String substringAfter(java.lang.String, java.lang.String)</function-signature>
    <example>
      P.O. Box: ${fn:substringAfter(zip, "-")}
    </example>
  </function>

  <function>
    <description>
      Returns a subset of a string before a specific substring.
    </description>
    <name>substringBefore</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String substringBefore(java.lang.String, java.lang.String)</function-signature>
    <example>
      Zip (without P.O. Box): ${fn:substringBefore(zip, "-")}
    </example>
  </function>

  <function>
    <description>
      Converts all of the characters of a string to lower case.
    </description>
    <name>toLowerCase</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String toLowerCase(java.lang.String)</function-signature>
    <example>
      Product name: ${fn.toLowerCase(product.name)}
    </example>
  </function>

  <function>
    <description>
      Converts all of the characters of a string to upper case.
    </description>
    <name>toUpperCase</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String toUpperCase(java.lang.String)</function-signature>
    <example>
      Product name: ${fn.UpperCase(product.name)}
    </example>
  </function>

  <function>
    <description>
      Removes white spaces from both ends of a string.
    </description>
    <name>trim</name>
    <function-class>org.apache.taglibs.standard.functions.Functions</function-class>
    <function-signature>java.lang.String trim(java.lang.String)</function-signature>
    <example>
      Name: ${fn.trim(name)}
    </example>  
  </function>
<!-- end: compatible jstl functions -->


<!-- JSTL functions extension -->
	<!-- start: commons-lang3 StringUtils -->
	<!-- Empty checks -->
	<function>
		<name>isEmpty</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean isEmpty(java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>isNotEmpty</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean isNotEmpty(java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>isBlank</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean isBlank(java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>isNotBlank</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean isNotBlank(java.lang.CharSequence)</function-signature>
	</function>
	
	<!-- trim and strip -->
	<function>
		<name>trimToEmpty</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String trimToEmpty(java.lang.String)</function-signature>
	</function>
	<function>
		<name>strip</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String strip(java.lang.String)</function-signature>
	</function>
	<function>
		<name>stripToEmpty</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String stripToEmpty(java.lang.String)</function-signature>
	</function>
	
	<!-- equals -->
	<function>
		<name>equals</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean equals(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>equalsIgnoreCase</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	
	<!-- case conversion -->
	<function>
		<name>capitalize</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String capitalize(java.lang.String)</function-signature>
	</function>
	<function>
		<name>uncapitalize</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String uncapitalize(java.lang.String)</function-signature>
	</function>
	
	<!-- default value -->
	<function>
		<name>defaultIfEmpty</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>defaultIfBlank</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.CharSequence defaultIfBlank(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	
	<!-- abbreviate -->
	<function>
		<name>abbreviate</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String abbreviate(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>abbreviateMiddle</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String abbreviate(java.lang.String, java.lang.String, int)</function-signature>
	</function>
	
	<!-- startsWith and  endsWith -->
	<function>
		<name>startsWithIgnoreCase</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>endsWithIgnoreCase</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>startsWithAny</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean startsWithAny(java.lang.CharSequence, java.lang.CharSequence[])</function-signature>
	</function>
	<function>
		<name>endsWithAny</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>boolean endsWithAny(java.lang.CharSequence, java.lang.CharSequence[])</function-signature>
	</function>
	
	<!-- replace -->
	<function>
		<name>replaceOnce</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String replaceOnce(java.lang.String, java.lang.String, java.lang.String)</function-signature>
	</function>
	<function>
		<name>replaceMax</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>overlay</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String overlay(java.lang.String, java.lang.String, int, int)</function-signature>
	</function>
	
	<!-- padding -->
	<function>
		<name>repeat</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String repeat(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>repeatSeparator</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String repeat(java.lang.String, java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>leftPad</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String leftPad(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>leftPadChar</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String leftPad(java.lang.String, int, char)</function-signature>
	</function>
	<function>
		<name>leftPadString</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String leftPad(java.lang.String, int, java.lang.String)</function-signature>
	</function>
	<function>
		<name>rightPad</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String rightPad(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>rightPadChar</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String rightPad(java.lang.String, int, char)</function-signature>
	</function>
	<function>
		<name>rightPadString</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String rightPad(java.lang.String, int, java.lang.String)</function-signature>
	</function>
	<function>
		<name>centerPad</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String center(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>centerPadChar</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String center(java.lang.String, int, char)</function-signature>
	</function>
	<function>
		<name>centerPadString</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String center(java.lang.String, int, java.lang.String)</function-signature>
	</function>
	
	<!-- substring and delete -->
	<function>
		<name>deleteWhitespace</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String deleteWhitespace(java.lang.String)</function-signature>
	</function>
		<function>
		<name>left</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String left(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>right</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String right(java.lang.String, int)</function-signature>
	</function>
	<function>
		<name>mid</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String mid(java.lang.String, int, int)</function-signature>
	</function>
	<function>
		<name>substringBeforeLast</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String substringBeforeLast(java.lang.String, java.lang.String)</function-signature>
	</function>
	<function>
		<name>substringAfterLast</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>java.lang.String substringBeforeLast(java.lang.String, java.lang.String)</function-signature>
	</function>
	
	<!-- indexof -->
	<function>
		<name>indexOfIgnoreCase</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)</function-signature>
	</function>
	<function>
		<name>ordinalIndexOf</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)</function-signature>
	</function>
	<function>
		<name>lastIndexOf</name>
		<function-class>org.apache.commons.lang3.StringUtils</function-class>
		<function-signature>int lastIndexOf(java.lang.CharSequence, int)</function-signature>
	</function>
	<!-- end: commons-lang3 StringUtils -->
	
	
	<!-- start: commons-lang3 StringEscapeUtils -->
	<function>
		<name>unescapeXml</name>
		<function-class>org.apache.commons.lang3.StringEscapeUtils</function-class>
		<function-signature>java.lang.String unescapeXml(java.lang.String)</function-signature>
	</function>
	<!-- end: commons-lang3 StringEscapeUtils -->
</taglib>
